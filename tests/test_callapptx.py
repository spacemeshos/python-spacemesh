from ..transactions import decode, Address, CallAppTx
from .test_util import alice, bob, assert_equal_tx, assert_transaction_equal_to_body
from ..transactions.transaction import ENABLE_TRANSACTION_PRUNING


def assert_equal_callapp_tx(a, b):
    assert a.body.call_data == b.body.call_data
    assert_equal_tx(a, b)


def test_callapptx_str():
    ft = CallAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    assert str(ft) == "CallAppTx(ttl=0, nonce=0, app_address=" + \
           str(bob.address) + ", amount=100, gas_limit=2, gas_price=1)"


def test_incomplete_callapptx_str():
    ft = CallAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    ftx = ft.new_ed()
    assert str(ftx) == \
           "IncompleteTransaction(tx_type=CALL_APP_ED_TX, body=CallAppTx(ttl=0, nonce=0, app_address=" + \
           str(bob.address) + ", amount=100, gas_limit=2, gas_price=1))"


def test_complete_callapptx_str():
    ft = CallAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    tx = ft.new_ed().sign(alice)
    assert str(tx) == "Transaction(tx_type=CALL_APP_ED_TX, body=CallAppTx(ttl=0, nonce=0, app_address=" + \
           str(bob.address) + ", amount=100, gas_limit=2, gas_price=1), " + \
           "signature=" + str(tx.signature) + ", " + \
           "public_key=" + str(tx.public_key) + ")"


def test_callapp_transaction():
    ft = CallAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    ftx = ft.new_ed()
    stx = ftx.encode(alice)
    tx = decode(stx)
    assert_equal_tx(ftx, tx)
    assert_transaction_equal_to_body(tx)

cases_signer = alice

case1_tx = CallAppTx(
    ttl=0,
    nonce=5,
    app_address=Address.from_list([
        0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7, 0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69,
        0x7f, 0x5e]),
    amount=104,
    gas_limit=1,
    gas_price=10,
    call_data=bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06]))

case1_signed_ed_tx = bytes([
    # type
    0x02, 0x00, 0x00, 0x00,
    # signature
    0x9c, 0x03, 0x4e, 0xb1, 0x42, 0x07, 0x40, 0xd6, 0xe2, 0x8b, 0xea, 0xc1, 0x84, 0xa3, 0xa2, 0xb6, 0x53, 0xb1, 0x87,
    0xc2, 0xaa, 0xea, 0x42, 0xc4, 0x13, 0x6e, 0xed, 0x76, 0x67, 0xec, 0xc9, 0xd7, 0xce, 0x80, 0xe1, 0x28, 0xb8, 0xcb,
    0xf0, 0xf5, 0x99, 0xf4, 0xba, 0x4c, 0xcd, 0x31, 0xf1, 0xd6, 0xaf, 0x7f, 0xc9, 0x25, 0xd7, 0xb6, 0x05, 0x57, 0xb1,
    0x5d, 0xd4, 0x7c, 0x2e, 0x41, 0x3c, 0x04,
    # data
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
    0x00, 0x00, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00,
    # public key
    0x00, 0x00, 0x00, 0x20, 0x38, 0x08, 0x8e, 0x4c, 0x2a, 0xe8, 0x2f, 0x5c, 0x45, 0xc6, 0x80, 0x8a, 0x61, 0xa6, 0x49,
    0x0d, 0x3c, 0x61, 0x2c, 0xe1, 0xda, 0x23, 0x57, 0x14, 0x46, 0x6f, 0xc7, 0x48, 0xfb, 0xc4, 0xcb, 0xbb,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x02, 0x00, 0x00, 0x00,
    # signature
    0x27, 0xdf, 0xfc, 0xcc, 0x7a, 0x9d, 0x63, 0xb5, 0x91, 0xb8, 0xe6, 0x42, 0x75, 0x12, 0xaf, 0x11, 0xfa, 0x9c, 0x19,
    0x1f, 0x7f, 0xa1, 0x07, 0xd0, 0xda, 0x48, 0x5c, 0xa5, 0x9f, 0x5d, 0xba, 0x79, 0xff, 0xa3, 0xa7, 0x43, 0xba, 0x01,
    0x32, 0xd2, 0x79, 0x2b, 0xce, 0x37, 0x9d, 0xa8, 0x2d, 0x94, 0xc0, 0x31, 0x1d, 0x1c, 0xda, 0x96, 0x67, 0x70, 0xc3,
    0x4d, 0x22, 0x58, 0x31, 0xe2, 0xbc, 0x0c,
    # data
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
    0x00, 0x00, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00,
    # public key
    0x00, 0x00, 0x00, 0x20, 0x38, 0x08, 0x8e, 0x4c, 0x2a, 0xe8, 0x2f, 0x5c, 0x45, 0xc6, 0x80, 0x8a, 0x61, 0xa6, 0x49,
    0x0d, 0x3c, 0x61, 0x2c, 0xe1, 0xda, 0x23, 0x57, 0x14, 0x46, 0x6f, 0xc7, 0x48, 0xfb, 0xc4, 0xcb, 0xbb,
])

case1_signed_edp_tx = bytes([
    # type
    0x03, 0x00, 0x00, 0x00,
    # signature
    0x93, 0xa5, 0x3d, 0xf4, 0x6e, 0xed, 0x6b, 0x9b, 0xf9, 0x4a, 0xc3, 0xd4, 0x19, 0x83, 0x60, 0x93, 0x1a, 0x09, 0xe6,
    0x75, 0x4e, 0xef, 0x8c, 0xa9, 0xb9, 0x4e, 0xda, 0xbc, 0x71, 0xb0, 0x3d, 0x63, 0x1b, 0x37, 0xed, 0x96, 0xb5, 0xa1,
    0x08, 0xf8, 0x54, 0x21, 0xc1, 0x48, 0x27, 0xde, 0xec, 0xdf, 0xf5, 0xf7, 0xd7, 0x21, 0x98, 0x35, 0x2f, 0x22, 0xe2,
    0x1a, 0xa4, 0xa2, 0x77, 0xc1, 0x35, 0x0b,
    # data
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
    0x00, 0x00, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x03, 0x00, 0x00, 0x00,
    # signature
    0x3c, 0x2e, 0x2a, 0x7b, 0x8d, 0xe5, 0xc9, 0x6f, 0x91, 0x00, 0x07, 0x23, 0xf5, 0xaf, 0x29, 0x8b, 0x4b, 0x58, 0x48,
    0x73, 0xc9, 0xaa, 0xd2, 0xe7, 0x4a, 0xb2, 0xd0, 0x62, 0x35, 0x08, 0x79, 0x0f, 0x43, 0x80, 0xd1, 0x3b, 0x79, 0x84,
    0x61, 0x45, 0xcd, 0x19, 0x16, 0x9f, 0x4f, 0x4c, 0x0d, 0x80, 0x7e, 0xf4, 0x3e, 0xc1, 0x71, 0x2d, 0xae, 0x65, 0xe0,
    0xf6, 0x08, 0x29, 0x11, 0xd3, 0x9c, 0x06,
    # data
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
    0x00, 0x00, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00,
])

case2_tx = CallAppTx(
    ttl=0,
    nonce=8,
    app_address=Address.from_list([
        0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7, 0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e,
        0xaa, 0x69, 0x7f, 0x5e]),
    amount=105,
    gas_limit=1,
    gas_price=5,
    call_data=bytes())

case2_signed_ed_tx = bytes([
    # type
    0x02, 0x00, 0x00, 0x00,
    # signature
    0x89, 0x22, 0x64, 0x36, 0xe3, 0xc1, 0x77, 0x79, 0xdb, 0xc1, 0xee, 0x4f, 0x2b, 0x54, 0x95, 0x82, 0x32, 0x23, 0x17,
    0x68, 0x7d, 0x1e, 0xf4, 0xa2, 0x08, 0x34, 0xc4, 0x1c, 0x85, 0x34, 0xb1, 0x99, 0x47, 0xb0, 0xd8, 0x24, 0xb8, 0x31,
    0x24, 0xac, 0x0b, 0x46, 0x9b, 0x3d, 0x61, 0x38, 0xfb, 0xe3, 0x08, 0x0e, 0xc1, 0x35, 0x18, 0x64, 0xfc, 0xac, 0x99,
    0x56, 0x21, 0x02, 0x23, 0x42, 0xd9, 0x0e,
    # data
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x00, 0x00, 0x00,
    # public key
    0x00, 0x00, 0x00, 0x20, 0x38, 0x08, 0x8e, 0x4c, 0x2a, 0xe8, 0x2f, 0x5c, 0x45, 0xc6, 0x80, 0x8a, 0x61, 0xa6, 0x49,
    0x0d, 0x3c, 0x61, 0x2c, 0xe1, 0xda, 0x23, 0x57, 0x14, 0x46, 0x6f, 0xc7, 0x48, 0xfb, 0xc4, 0xcb, 0xbb,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x02, 0x00, 0x00, 0x00,
    # signature
    0xf9, 0xb1, 0x0e, 0x18, 0x89, 0xdb, 0x78, 0x08, 0x13, 0x99, 0xb8, 0x93, 0x31, 0x1d, 0xed, 0x64, 0xd7, 0x16, 0x4c,
    0x0a, 0xe7, 0x46, 0x58, 0x43, 0xb6, 0x81, 0xc6, 0xb5, 0x8c, 0x6f, 0x05, 0x32, 0xa0, 0xe5, 0x0f, 0x42, 0xb1, 0xc0,
    0xde, 0x33, 0xc8, 0x64, 0x03, 0xf8, 0xd6, 0x80, 0xc1, 0x77, 0xf4, 0x56, 0x93, 0xa2, 0x31, 0xe0, 0x8e, 0xe3, 0x08,
    0x1e, 0x71, 0x82, 0x91, 0xea, 0x62, 0x0f,
    # data
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x00, 0x00, 0x00,
    # public key
    0x00, 0x00, 0x00, 0x20, 0x38, 0x08, 0x8e, 0x4c, 0x2a, 0xe8, 0x2f, 0x5c, 0x45, 0xc6, 0x80, 0x8a, 0x61, 0xa6, 0x49,
    0x0d, 0x3c, 0x61, 0x2c, 0xe1, 0xda, 0x23, 0x57, 0x14, 0x46, 0x6f, 0xc7, 0x48, 0xfb, 0xc4, 0xcb, 0xbb,
])

case2_signed_edp_tx = bytes([
    # type
    0x03, 0x00, 0x00, 0x00,
    # signature
    0x54, 0x32, 0x4a, 0x0b, 0x38, 0xfd, 0xa4, 0x7f, 0x82, 0x07, 0xa2, 0xac, 0x8f, 0xf6, 0x1c, 0xd4, 0xb4, 0xdb, 0xcb,
    0xf2, 0x3b, 0x67, 0xbe, 0xf6, 0x4c, 0x98, 0x67, 0x4c, 0xbe, 0xe5, 0x37, 0xc5, 0x77, 0xb7, 0x3f, 0xca, 0xda, 0x88,
    0x24, 0x52, 0x4d, 0x21, 0xbd, 0x6d, 0xf0, 0xa8, 0x90, 0xa2, 0x54, 0xfa, 0x21, 0x47, 0xa1, 0x1a, 0x40, 0x5b, 0x56,
    0x9c, 0xb0, 0xc9, 0x84, 0x0b, 0x41, 0x09,
    # data
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x00, 0x00, 0x00,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x03, 0x00, 0x00, 0x00,
    # signature
    0x36, 0x6b, 0xc3, 0x28, 0x63, 0x3a, 0xc1, 0xd1, 0xb4, 0xd5, 0xb7, 0x2e, 0xbc, 0xf4, 0xf3, 0x50, 0x3b, 0x92, 0x4f,
    0x76, 0x2d, 0xb9, 0x46, 0x59, 0x80, 0xa5, 0x6d, 0xde, 0x5c, 0xb6, 0x6e, 0xa9, 0x9d, 0xf0, 0xc2, 0x71, 0x68, 0x42,
    0x41, 0x3e, 0x47, 0x12, 0x90, 0x97, 0x10, 0xa3, 0xbd, 0x45, 0xce, 0x03, 0xc4, 0x8b, 0x81, 0x28, 0xe3, 0x82, 0xde,
    0x3c, 0xb8, 0x43, 0xb6, 0x93, 0x74, 0x07,
    # data
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x00, 0x00, 0x00,
])

cases = [
    (case1_tx, case1_signed_ed_tx, case1_signed_edp_tx),
    (case2_tx, case2_signed_ed_tx, case2_signed_edp_tx),
]


def test_callapptx_binary_encode():
    for ft, signed_ed, signed_edp in cases:
        tx_ed = ft.new_ed().encode(cases_signer)
        assert tx_ed == signed_ed
        tx_edp = ft.new_ed_plus().encode(cases_signer)
        assert tx_edp == signed_edp


def test_callapptx_binary_decode():
    for ft, signed_ed, signed_edp in cases:
        tx_ed = decode(signed_ed)
        assert_equal_callapp_tx(ft.new_ed(), tx_ed)
        assert tx_ed.origin == cases_signer.address
        tx_edp = decode(signed_edp)
        assert_equal_tx(ft.new_ed_plus(), tx_edp)
        assert tx_edp.origin == cases_signer.address
