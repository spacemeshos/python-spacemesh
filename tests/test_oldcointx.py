from ..transactions import sign, decode, Address, OldCoinTx
from .test_util import alice, bob, assert_equal_tx


def test_oldcointx_str():
    ft = OldCoinTx(recipient=bob.address, nonce=0, amount=100, gas_limit=2, fee=1)
    assert str(ft) == "OldCoinTx(nonce=0, recipient=" + \
           str(bob.address) + ", amount=100, gas_limit=2, fee=1)"


def test_incomplete_oldcointx_str():
    ft = OldCoinTx(recipient=bob.address, nonce=0, amount=100, gas_limit=2, fee=1)
    ftx = ft.new_ed()
    assert str(ftx) == \
           "IncompleteTransaction(tx_type=OLD_COIN_ED_TX, body=OldCoinTx(nonce=0, recipient=" + \
           str(bob.address) + ", amount=100, gas_limit=2, fee=1))"


def test_complete_oldcointx_str():
    ft = OldCoinTx(recipient=bob.address, nonce=0, amount=100, gas_limit=2, fee=1)
    tx = sign(ft.new_ed(), alice)
    assert str(tx) == "Transaction(tx_type=OLD_COIN_ED_TX, body=OldCoinTx(nonce=0, recipient=" + \
           str(bob.address) + ", amount=100, gas_limit=2, fee=1), " + \
           "signature=" + str(tx.signature) + ", " + \
           "public_key=" + str(tx.public_key) + ")"


def test_oldcoin_transaction():
    ft = OldCoinTx(recipient=bob.address, nonce=0, amount=100, gas_limit=2, fee=1)
    ftx = ft.new_ed()
    stx = ftx.message.sign(alice)
    tx = decode(stx)
    assert_equal_tx(ftx, tx)


cases_signer = alice

case1_tx = OldCoinTx(
    nonce=5,
    recipient=Address.from_list([
        0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7, 0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69,
        0x7f, 0x5e]),
    gas_limit=10,
    fee=1,
    amount=100,
)

case1_signed_ed_tx = bytes([
    # type
    0x06, 0x00, 0x00, 0x00,
    # signature
    0x5c, 0x50, 0xa9, 0x24, 0xe0, 0x44, 0xea, 0x5b, 0x3f, 0x8d, 0x84, 0x80, 0x99, 0x5d, 0x85, 0xce, 0x25, 0x69, 0x06,
    0xfc, 0xc3, 0xce, 0x06, 0xf8, 0xc6, 0x82, 0x76, 0xd9, 0xa7, 0xb5, 0xce, 0x40, 0x16, 0xea, 0xe7, 0x6a, 0xbb, 0x30,
    0x8a, 0x13, 0x17, 0x10, 0xca, 0x11, 0x14, 0x56, 0x02, 0x7c, 0xbe, 0x1b, 0xa2, 0x30, 0x3d, 0x99, 0xa8, 0x67, 0x49,
    0x42, 0x0d, 0xc5, 0xa2, 0x7e, 0xdb, 0x0a,
    # data
    0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
    # public key
    0x00, 0x00, 0x00, 0x20, 0x38, 0x08, 0x8e, 0x4c, 0x2a, 0xe8, 0x2f, 0x5c, 0x45, 0xc6, 0x80, 0x8a, 0x61, 0xa6, 0x49,
    0x0d, 0x3c, 0x61, 0x2c, 0xe1, 0xda, 0x23, 0x57, 0x14, 0x46, 0x6f, 0xc7, 0x48, 0xfb, 0xc4, 0xcb, 0xbb,
])

case1_signed_edp_tx = bytes([
    # type
    0x07, 0x00, 0x00, 0x00,
    # signature
    0x06, 0x52, 0x61, 0xbd, 0x72, 0xb2, 0x80, 0x02, 0x7f, 0x6d, 0xb1, 0xfc, 0x1b, 0xb7, 0x15, 0xce, 0x60, 0x9b, 0x06,
    0x85, 0x22, 0xf3, 0x36, 0x03, 0x7b, 0x68, 0xe6, 0x1d, 0x4e, 0x51, 0x74, 0xd8, 0xed, 0x35, 0x7c, 0xbc, 0xff, 0x32,
    0x88, 0x3b, 0x21, 0x6d, 0x72, 0xbe, 0x77, 0x2b, 0x31, 0xca, 0x64, 0xad, 0xed, 0x9c, 0xfe, 0x26, 0x9b, 0x94, 0x96,
    0xdd, 0xc5, 0x45, 0x30, 0xab, 0x0c, 0x05,
    # data
    0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
])

case2_tx = OldCoinTx(
    nonce=6,
    recipient=Address.from_list([
        0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7, 0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa,
        0x69, 0x7f, 0x5e]),
    gas_limit=10,
    fee=2,
    amount=101,
)

case2_signed_ed_tx = bytes([
    # type
    0x06, 0x00, 0x00, 0x00,
    # sign
    0xad, 0xe1, 0xd0, 0x1b, 0x91, 0x02, 0xd3, 0x20, 0x4d, 0xb0, 0x3b, 0xb1, 0xd1, 0x4a, 0xf9, 0x96, 0x07, 0x05, 0xe2,
    0xbb, 0x92, 0x93, 0xab, 0x17, 0x18, 0x23, 0xe7, 0xdd, 0x54, 0xf1, 0xce, 0xbb, 0x54, 0x38, 0x7a, 0xaa, 0x48, 0x28,
    0xcf, 0x4f, 0xd9, 0xd9, 0xc7, 0x4a, 0xc2, 0xb6, 0x9e, 0xb9, 0x19, 0x6e, 0x29, 0xcb, 0x57, 0x2b, 0x77, 0x4f, 0x75,
    0xd1, 0xb2, 0x7e, 0xed, 0x6c, 0x8b, 0x0a,
    # data
    0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
    # public key
    0x00, 0x00, 0x00, 0x20, 0x38, 0x08, 0x8e, 0x4c, 0x2a, 0xe8, 0x2f, 0x5c, 0x45, 0xc6, 0x80, 0x8a, 0x61, 0xa6, 0x49,
    0x0d, 0x3c, 0x61, 0x2c, 0xe1, 0xda, 0x23, 0x57, 0x14, 0x46, 0x6f, 0xc7, 0x48, 0xfb, 0xc4, 0xcb, 0xbb,
])

case2_signed_edp_tx = bytes([
    # type
    0x07, 0x00, 0x00, 0x00,
    # sign
    0x44, 0x5e, 0xdf, 0xa6, 0x90, 0x31, 0xb4, 0xe6, 0xbc, 0xba, 0x90, 0xed, 0x9c, 0xc9, 0x15, 0x46, 0x24, 0x1b, 0x42,
    0x17, 0x16, 0x6d, 0xd8, 0x9d, 0x42, 0x53, 0xa2, 0x85, 0xfa, 0x9c, 0xff, 0x97, 0x43, 0xd1, 0xd2, 0xe9, 0xa2, 0x78,
    0xf1, 0x3a, 0xc5, 0xe1, 0x41, 0xab, 0xcc, 0x02, 0xeb, 0x0c, 0xb6, 0x00, 0xe8, 0xb2, 0xfa, 0xa8, 0x7d, 0x99, 0x7e,
    0x18, 0x28, 0x77, 0x63, 0xba, 0xc3, 0x04,
    # data
    0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7,
    0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69, 0x7f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
])

cases = [
    (case1_tx, case1_signed_ed_tx, case1_signed_edp_tx),
    (case2_tx, case2_signed_ed_tx, case2_signed_edp_tx)
]


def test_oldcointx_binary_encode():
    for ft, signed_ed, signed_edp in cases:
        tx_ed = ft.new_ed().message.sign(cases_signer)
        assert tx_ed == signed_ed
        tx_edp = ft.new_ed_plus().message.sign(cases_signer)
        assert tx_edp == signed_edp


def test_oldcointx_binary_decode():
    for ft, signed_ed, signed_edp in cases:
        tx_ed = decode(signed_ed)
        assert_equal_tx(ft.new_ed(), tx_ed)
        assert tx_ed.origin == cases_signer.address
        tx_edp = decode(signed_edp)
        assert_equal_tx(ft.new_ed_plus(), tx_edp)
        assert tx_edp.origin == cases_signer.address
