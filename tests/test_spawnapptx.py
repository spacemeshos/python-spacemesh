from ..transactions import sign, decode, Address, SpawnAppTx
from .test_util import alice, bob, assert_equal_tx
from ..transactions.transaction import ENABLE_TRANSACTION_PRUNING


def assert_equal_callapp_tx(a, b):
    assert a.body.call_data == b.body.call_data
    assert_equal_tx(a, b)


def test_callapptx_str():
    ft = SpawnAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    assert str(ft) == "SpawnAppTx(ttl=0, nonce=0, app_address=" + \
           str(bob.address) + ", amount=100, gas_limit=2, gas_price=1)"


def test_incomplete_callapptx_str():
    ft = SpawnAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    ftx = ft.new_ed()
    assert str(ftx) == \
           "IncompleteTransaction(tx_type=SPAWN_APP_ED_TX, body=SpawnAppTx(ttl=0, nonce=0, app_address=" + \
           str(bob.address) + ", amount=100, gas_limit=2, gas_price=1))"


def test_complete_callapptx_str():
    ft = SpawnAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    tx = sign(ft.new_ed(), alice)
    assert str(tx) == "Transaction(tx_type=SPAWN_APP_ED_TX, body=SpawnAppTx(ttl=0, nonce=0, app_address=" + \
           str(bob.address) + ", amount=100, gas_limit=2, gas_price=1), " + \
           "signature=" + str(tx.signature) + ", " + \
           "public_key=" + str(tx.public_key) + ")"


def test_spawnapp_transaction():
    ft = SpawnAppTx(ttl=0, app_address=bob.address, nonce=0, amount=100, gas_limit=2, gas_price=1, call_data=bytes())
    ftx = ft.new_ed()
    stx = ftx.message.sign(alice)
    tx = decode(stx)
    assert_equal_tx(ftx, tx)


cases_signer = alice

case1_tx = SpawnAppTx(
    ttl=0,
    nonce=5,
    app_address=Address.from_list([
        0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7, 0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e, 0xaa, 0x69,
        0x7f, 0x5e]),
    amount=107,
    gas_limit=1,
    gas_price=10,
    call_data=bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06]))

case1_signed_ed_tx = bytes([
    # type
    0x04,0x00,0x00,0x00,
    # signature
    0xb1,0x8a,0x6a,0x58,0x42,0xe1,0x69,0x7c,0xe3,0x57,0xba,0xe7,0x58,0xd0,0x6c,0xa1,0xd6,0xbe,0x8c,0xf6,0x0d,0x90,0x8b,0x13,0xc9,0x0c,0xaa,0xa7,0x42,0x36,0x67,0xd3,0x56,0xfb,0x63,0xbd,0x52,0xdd,0xcd,0xa3,0xd9,0xef,0x60,0xc6,0x2c,0xdb,0xbc,0x55,0xb9,0xc8,0x37,0x0d,0x62,0x63,0x21,0x06,0xf7,0x16,0x73,0xd9,0xfe,0xed,0x1e,0x09,
    # data
    0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x06,0x01,0x02,0x03,0x04,0x05,0x06,0x00,0x00,
    # public key
    0x00,0x00,0x00,0x20,0x38,0x08,0x8e,0x4c,0x2a,0xe8,0x2f,0x5c,0x45,0xc6,0x80,0x8a,0x61,0xa6,0x49,0x0d,0x3c,0x61,0x2c,0xe1,0xda,0x23,0x57,0x14,0x46,0x6f,0xc7,0x48,0xfb,0xc4,0xcb,0xbb,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x04,0x00,0x00,0x00,
    # signature
    0x7f,0xff,0x9c,0xcd,0xdf,0xe8,0xce,0x54,0x41,0x7b,0xdb,0xb2,0x7d,0xdd,0x5c,0x5e,0x04,0xc2,0xdf,0x87,0x7e,0xa5,0x8f,0x2d,0x7a,0xca,0x92,0xfc,0xe5,0xe5,0xa5,0x8b,0xee,0xc0,0xb1,0xf0,0x8c,0xac,0x25,0x27,0x12,0x09,0x2a,0xb4,0xfd,0x87,0xa3,0xd1,0xf9,0x0c,0x5d,0x5e,0x97,0x2c,0x31,0x1f,0x62,0x35,0x2a,0xbf,0x55,0xda,0x3d,0x02,
    # data
    0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x06,0x01,0x02,0x03,0x04,0x05,0x06,0x00,0x00,
    # public key
    0x00,0x00,0x00,0x20,0x38,0x08,0x8e,0x4c,0x2a,0xe8,0x2f,0x5c,0x45,0xc6,0x80,0x8a,0x61,0xa6,0x49,0x0d,0x3c,0x61,0x2c,0xe1,0xda,0x23,0x57,0x14,0x46,0x6f,0xc7,0x48,0xfb,0xc4,0xcb,0xbb,
])

case1_signed_edp_tx = bytes([
    # type
    0x05,0x00,0x00,0x00,
    # signature
    0x3f,0x71,0x62,0xf8,0x68,0xb0,0x2b,0x1e,0xa8,0xc1,0xb4,0xb9,0xb7,0x70,0xa1,0x3c,0xbe,0x09,0xff,0x04,0xab,0xa7,0xf0,0x0e,0xda,0x26,0x7d,0xba,0x2d,0x37,0x6c,0x72,0xd2,0xbf,0x52,0x91,0x47,0xcf,0x49,0xd5,0x1d,0x3f,0xe5,0x23,0x10,0x68,0xec,0xce,0xb0,0x85,0x4c,0xc0,0xcc,0x2c,0x35,0xef,0x0f,0x5d,0x5e,0xf6,0xc1,0x37,0x89,0x04,
    # data
    0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x06,0x01,0x02,0x03,0x04,0x05,0x06,0x00,0x00,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x05,0x00,0x00,0x00,
    # signature
    0x32,0xbb,0xd7,0xd8,0x12,0xc5,0x69,0x6d,0x48,0x4b,0x9f,0x3c,0x5e,0xbc,0x9c,0x83,0xf8,0xc4,0x2d,0x34,0x26,0x22,0xae,0x9b,0x37,0xb4,0x59,0x9f,0xb0,0xc8,0xb1,0x5b,0x24,0x8c,0x21,0xd7,0xf6,0xde,0x7e,0xd9,0x7f,0x7a,0xab,0x51,0x31,0xe2,0x01,0x45,0xf4,0x06,0x43,0xb6,0x2f,0x0c,0xce,0x6d,0x30,0x36,0x60,0x46,0x13,0xbd,0x70,0x03,
    # data
    0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x06,0x01,0x02,0x03,0x04,0x05,0x06,0x00,0x00,
])

case2_tx = SpawnAppTx(
    ttl=0,
    nonce=8,
    app_address=Address.from_list([
        0x26, 0x4d, 0xd0, 0x80, 0xe4, 0xb3, 0xe7, 0x30, 0x16, 0xbd, 0xf6, 0x57, 0x4b, 0x4c, 0xd8, 0x7e,
        0xaa, 0x69, 0x7f, 0x5e]),
    amount=108,
    gas_limit=1,
    gas_price=5,
    call_data=bytes())

case2_signed_ed_tx = bytes([
    # type
    0x04,0x00,0x00,0x00,
    # signature
    0x9b,0x1e,0xb7,0x03,0x20,0x5a,0x13,0x15,0x1b,0x86,0x37,0x65,0x9b,0xa1,0xa9,0xe8,0xdc,0x23,0xaa,0x90,0xef,0x82,0x77,0x59,0x09,0x4e,0xcb,0xf5,0x14,0x86,0xfc,0x95,0xda,0x8f,0xc7,0x7d,0x76,0x6c,0xe3,0xfb,0x99,0x38,0x95,0xe8,0x28,0xf5,0x1b,0xf5,0xfb,0x1d,0x45,0xaf,0xfd,0xbf,0xd6,0xe3,0x46,0xfc,0x3a,0x74,0xbe,0xf3,0x63,0x0b,
    # data
    0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
    # public key
    0x00,0x00,0x00,0x20,0x38,0x08,0x8e,0x4c,0x2a,0xe8,0x2f,0x5c,0x45,0xc6,0x80,0x8a,0x61,0xa6,0x49,0x0d,0x3c,0x61,0x2c,0xe1,0xda,0x23,0x57,0x14,0x46,0x6f,0xc7,0x48,0xfb,0xc4,0xcb,0xbb,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x04,0x00,0x00,0x00,
    # signature
    0xf0,0x4a,0x03,0xb7,0x11,0xd2,0xaf,0x4f,0xc6,0xb3,0x61,0x46,0x96,0x86,0x41,0x58,0x63,0xa0,0x34,0x44,0x56,0xb7,0x3e,0x77,0x75,0x19,0xe5,0x9a,0xf5,0xe9,0xbd,0xe9,0x6a,0xab,0x3b,0xa7,0x1a,0xc3,0x5f,0xa5,0x59,0x83,0xb1,0x4d,0xa4,0x73,0x3a,0xd7,0x61,0x52,0xde,0xf0,0xcb,0x4c,0xd3,0x8b,0x8c,0x7d,0x69,0xbe,0x48,0x48,0xeb,0x09,
    # data
    0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
    # public key
    0x00,0x00,0x00,0x20,0x38,0x08,0x8e,0x4c,0x2a,0xe8,0x2f,0x5c,0x45,0xc6,0x80,0x8a,0x61,0xa6,0x49,0x0d,0x3c,0x61,0x2c,0xe1,0xda,0x23,0x57,0x14,0x46,0x6f,0xc7,0x48,0xfb,0xc4,0xcb,0xbb,
])

case2_signed_edp_tx = bytes([
    # type
    0x05,0x00,0x00,0x00,
    # signature
    0x2b,0x56,0x38,0xc5,0x90,0x6e,0x4e,0x01,0x5d,0x0e,0x69,0x23,0x02,0x25,0x09,0x6f,0x16,0x25,0x01,0xad,0xb4,0x07,0x77,0xaa,0xc7,0xaf,0xad,0x71,0x73,0x5e,0x3a,0x01,0x1d,0xb8,0x8a,0x06,0x6f,0x1f,0xf6,0xdb,0x73,0x79,0x5c,0xf2,0x11,0x9b,0x32,0xe1,0x38,0x50,0xb2,0x0b,0xd3,0xf4,0xec,0x9f,0x96,0xc9,0xb1,0x92,0x9b,0xc4,0xcf,0x08,
    # data
    0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
]) if ENABLE_TRANSACTION_PRUNING else bytes([
    # type
    0x05,0x00,0x00,0x00,
    # signature
    0xf4,0xfc,0x47,0xd7,0x28,0x3d,0xfe,0x3c,0x21,0xb6,0x2a,0x39,0x64,0x25,0xb0,0xd7,0x7d,0x63,0x4d,0x40,0xea,0x0e,0xa0,0xef,0x1f,0x1d,0xa9,0xd6,0xef,0x24,0xc0,0x48,0x5f,0xdb,0x3b,0x4c,0xf3,0x61,0xf9,0x77,0x38,0x13,0xd2,0xeb,0x82,0x22,0x52,0xae,0x83,0x8c,0xe5,0xf6,0x05,0xe3,0x4e,0xfe,0xc5,0x85,0x09,0xcf,0x74,0xb4,0x2b,0x00,
    # data
    0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x26,0x4d,0xd0,0x80,0xe4,0xb3,0xe7,0x30,0x16,0xbd,0xf6,0x57,0x4b,0x4c,0xd8,0x7e,0xaa,0x69,0x7f,0x5e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
])

cases = [
    (case1_tx, case1_signed_ed_tx, case1_signed_edp_tx),
    (case2_tx, case2_signed_ed_tx, case2_signed_edp_tx),
]


def test_spawnapptx_binary_encode():
    for ft, signed_ed, signed_edp in cases:
        tx_ed = ft.new_ed().message.sign(cases_signer)
        assert tx_ed == signed_ed
        tx_edp = ft.new_ed_plus().message.sign(cases_signer)
        assert tx_edp == signed_edp


def test_spawnapptx_binary_decode():
    for ft, signed_ed, signed_edp in cases:
        tx_ed = decode(signed_ed)
        assert_equal_callapp_tx(ft.new_ed(), tx_ed)
        assert tx_ed.origin == cases_signer.address
        tx_edp = decode(signed_edp)
        assert_equal_tx(ft.new_ed_plus(), tx_edp)
        assert tx_edp.origin == cases_signer.address
